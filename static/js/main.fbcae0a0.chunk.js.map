{"version":3,"sources":["components/Addwork.js","components/Sort.js","components/Search.js","components/Addbutton.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Addwork","props","handleChange","event","target","name","value","JSON","parse","setState","handleSubmit","preventDefault","onData","state","id","status","nextProps","this","taskEditing","prevState","console","log","className","onSubmit","type","onChange","aria-describedby","Component","Sort","onFilter","onSort","sort","Search","keywords","onClick","onSearch","aria-label","Addbutton","showTaskList","params","hide","onHide","Control","TaskItem","onUpdateStatus","task","onDelete","e","inUpdate","onUpdate","placeholder","hidden","index","scope","TaskList","filterName","filterStatus","tasks","elmTasks","map","key","App","isDisplay","data","uuidv4","push","localStorage","setItem","stringify","findIndex","splice","onShow","filter","toLowerCase","result","forEach","getItem","indexOf","a","b","elmTaskForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbcae0a0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Addwork extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            id: \"\",\n            name: \"\",\n            status: true\n        }\n    }\n\n    // componentWillMount() {\n    //     if(this.props.taskEditing){\n    //         this.setState({\n    //             id: this.props.taskEditing.id,\n    //             name: this.props.taskEditing.name,\n    //             status: this.props.taskEditing.status\n    //         } \n    //         )\n    //     }\n    // }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.taskEditing !== null){\n            this.setState((prevState,nextProps) => ({\n                id: nextProps.taskEditing.id,\n                name: nextProps.taskEditing.name,\n                status: nextProps.taskEditing.status\n            }),()=>{console.log(this.state)});\n        }\n    }\n\n    handleChange = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        if(value === \"true\" || value === \"false\"){\n            value = JSON.parse(value);\n        }\n        this.setState({\n            [name]:value\n        })\n    }\n\n\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onData(this.state)\n    }\n\n\n\n    render() {\n        let { id } = this.state\n        console.log(id)\n        return (\n                <div className=\"card \">\n                    <div className=\"card-header\">\n                        <div className=\"row d-flex align-items-center\">\n                        <h3 className=\"col\">{\"Add Work\"}</h3>\n                            \n                            <span className=\"col fa fa-times-circle d-flex justify-content-end\">\n                            </span>\n                        </div>\n                        \n                    </div>\n                    <ul className=\"list-group list-group-flush p-2\" >\n                        <form onSubmit ={this.handleSubmit}>\n                            <div className=\"form-group\">\n                            <label>Name:</label>\n                            <input type=\"text\"\n                                className=\"form-control\" name=\"name\" onChange={this.handleChange}  aria-describedby=\"helpId\" \n                            />\n                            </div>\n                        \n\n                            <div className=\"form-group\">\n                            <label>Status</label>\n                            <select className=\"form-control\" name=\"status\" onChange={this.handleChange}>\n                                <option value={true} >Active</option>\n                                <option value={false} >Passive</option>\n                            </select>\n                            </div>\n\n                            <div className=\"d-flex justify-content-center\">\n                                <button type=\"submit\" name=\"\"  className=\"btn btn-success mr-1\"><i className=\"fas fa-plus\"></i> Add</button>\n                                <button type=\"reset\" name=\"\"  className=\"btn btn-danger\"><i className=\"fas fa-times\"></i> Cancel</button>\n                            </div>\n\n                        </form>\n                    </ul>\n\n                </div>\n        )\n    }\n}\n\nexport default Addwork\n","import React, { Component } from 'react'\n\nexport class Sort extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            sort: 0\n        }\n    }\n\n\n    onFilter = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = +target.value;\n        this.setState({\n            [name] : value      \n        })\n        this.props.onSort(name === 'sort' ? value : this.state.sort);\n    }\n    \n\n\n    render() {\n        return (\n            <div className=\"form-group\">\n              <label></label>\n              <select onChange = {this.onFilter} className=\"form-control\" name=\"sort\">\n                    <option value={0}>Time</option>\n                    <option value={-1}>A-Z</option>\n                    <option value={1}>Z-A</option>\n                                    \n              </select>\n            </div>\n        )\n    }\n}\n\nexport default Sort\n","import React, { Component } from 'react'\n\nexport class Search extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            keywords: ''\n        }\n    }\n\n    onChange = (event) => {\n        this.setState({\n              keywords : event.target.value\n        }, () => {console.log(this.state.keywords)})\n    }\n\n    onClick = () => {\n        this.props.onSearch(this.state.keywords)\n    }\n\n\n    render() {\n        \n        return (\n             <div className=\"input-group mb-3\">\n                    <input \n                        type=\"text\" \n                        name=\"keywords\"\n                        className=\"form-control\"  \n                        aria-label=\"Recipient's username\" \n                        aria-describedby=\"basic-addon2\" \n                        onChange = {this.onChange}\n                        value = { this.state.keywords }\n                    />\n                    <div className=\"input-group-append mr-3\">\n                        <button onClick={this.onClick} type=\"button\" name=\"\" className=\"btn btn-primary\"><i className=\"fas fa-search\"></i> Search</button>\n                    </div>\n             </div>       \n        )\n    }\n}\n\nexport default Search\n","import React, { Component } from 'react'\n\nexport class Addbutton extends Component {  \n\n    constructor(props){\n        super(props)\n        this.state = {\n            hide: true,\n        }\n    }\n    \n    showTaskList = (params) => {\n        this.setState((prevState) => ({\n            hide: !prevState.hide\n        }))\n        params = this.state.hide\n        this.props.onHide(params)\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.showTaskList} type=\"button\" name=\"\"  className=\"btn btn-primary\"><i className=\"fas fa-plus\"></i> Add Work</button>\n            </div>\n        )\n    }\n}\n\nexport default Addbutton\n","import React, { Component } from 'react'\nimport Sort from './Sort'\nimport Search from './Search'\nimport Addbutton from './Addbutton'\n\nexport class Control extends Component {\n\n    \n\n    render() {\n        return (\n            <div>\n                <Addbutton \n                    onHide = {this.props.onHide} \n                />\n                <div className=\"row mt-2 mr-2 d-flex align-items-center\">\n                    <form className=\"col-8 \">\n                        <Search onSearch = {this.props.onSearch} />\n                    </form>\n                    <form className=\"col-2 \">\n                        <Sort onSort = { this.props.onSort}/>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Control\n","import React, { Component } from 'react'\n\nexport class TaskItem extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"this.props.task.name\"\n        }\n    }\n    \n\n    onUpdateStatus = () => {\n        this.props.onUpdateStatus(this.props.task.id);\n    }\n\n    onDelete = () => {\n        this.props.onDelete(this.props.task.id)\n    }\n\n\n    handleChange = (e) => {\n        var target = e.target;\n        var name = target.name;\n        var value = target.value;\n        this.setState({\n            [name]:value\n        })\n        \n    }\n\n    inUpdate = (e) => {\n        e.preventDefault();\n        this.props.onUpdate(this.props.task.id,this.state.name)\n        console.log(this.state)\n    }\n\n    onUpdate = () => {\n        this.props.onUpdate(this.props.task.id)\n        this.props.task.name = <form>\n                                    <input \n                                        type=\"text\"\n                                        className=\"form-control\" name=\"name\" aria-describedby=\"helpId\" placeholder=\"\" \n                                        \n                                        onChange = {this.handleChange}\n                                    />\n                                    <input onClick={this.inUpdate} type=\"submit\" hidden />\n                                </form>\n    }\n\n\n    render() {\n\n        const {task, index} = this.props;\n        return (\n            \n            <tr>\n                <th scope=\"row\">{index + 1}</th>\n\n                    <td>{this.props.task.name}</td>\n                    <td>\n                        <div className=\"d-flex justify-content-lg-center align-items-center\">\n                        <span onClick = {this.onUpdateStatus} \n                            className={task.status === true ? \"badge badge-success text-center mx-auto\" : \"badge badge-danger text-center mx-auto\"  }>{task.status === true ? \"Active\" : \"Passive\"}</span>\n                        </div>\n                    </td>\n                    <td>\n                        <button onClick = {this.onUpdate}type=\"button\" className=\"btn btn-success mr-1\"><i className=\"fas fa-marker\"></i> Edit</button>\n                        <button onClick = {this.onDelete} type=\"button\" className=\"btn btn-danger\"><i className=\"fa fa-trash-alt\"></i> Delete</button>\n                    </td>\n            </tr>\n        )\n    }\n}\n\nexport default TaskItem\n","import React, { Component } from 'react'\nimport TaskItem from './TaskItem';\n\nexport class TaskList extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            filterName: '',\n            filterStatus: -1\n        }\n    }\n\n\n    onFilter = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        this.setState({\n            [name] : value      \n        })\n        this.props.onFilter(\n            name === 'filterName' ? value : this.state.filterName,\n            name === 'filterStatus' ? value : this.state.filterStatus\n        )\n    }\n\n\n    render() {\n\n        const {tasks} = this.props;\n        const {filterName} = this.state;\n        const elmTasks = tasks.map((task, index) => {\n            return <TaskItem key={task.id} \n            index = {index} task = { task } \n            onUpdate = {this.props.onUpdate} \n            onDelete = {this.props.onDelete} \n            onUpdateStatus ={ this.props.onUpdateStatus }\n            taskEditing = { this.props.taskEditing}\n            />\n        })\n        return (\n            <div>\n                <table className=\"table table-bordered\">\n                    <thead>\n                        <tr>\n                        <th scope=\"col\">STT</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Status</th>\n                        <th scope=\"col\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\"></th>\n                            <td>\n                                <div className=\"form-group\">\n                                <input \n                                    type=\"text\"\n                                    className=\"form-control\" name=\"filterName\" id=\"\" aria-describedby=\"helpId\" placeholder=\"\" \n                                    value = { filterName }\n                                    onChange = {this.onFilter}\n                                    />\n                                </div>\n                            </td>\n                            <td>\n                                <div className=\"form-group\">\n                                <select onChange = {this.onFilter} className=\"form-control\" name=\"filterStatus\" id=\"\">\n                                    <option value={-1}>All</option>\n                                    <option value={1}>Active</option>\n                                    <option value={0}>Passive</option>\n                                    \n                                </select>\n                                </div>\n                            </td>\n                            <td>@mdo</td>\n                        </tr>\n                        {elmTasks}\n                        \n                    </tbody>\n                    </table>\n            </div>\n        )\n    }\n}\n\nexport default TaskList\n","import React, { Component } from 'react'\nimport './App.css'\nimport Addwork from './components/Addwork'\nimport Control from './components/Control'\nimport TaskList from './components/TaskList'\n\nimport { v4 as uuidv4} from 'uuid';\n\nexport class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      isDisplay : false,\n      tasks: [],\n      taskEditing: null,\n      keywords: '',\n      filter: {\n          name: '',\n          status : -1\n      },\n      sort: 0\n      \n\n    }\n  }\n\n  componentWillMount() {\n    if(localStorage && localStorage.getItem('tasks')){\n      let tasks = JSON.parse(localStorage.getItem('tasks'))\n      this.setState({\n        tasks: tasks\n      })\n\n    }\n  }\n\n\n  onHide = (params) => {\n    this.setState({\n      isDisplay: params\n    })\n  }\n\n  \n\n  onData = (data) => {\n    let {tasks} = this.state;\n    data.id = uuidv4();\n    tasks.push(data);\n    this.setState({\n      tasks : tasks\n    })\n    localStorage.setItem('tasks',JSON.stringify(tasks))\n  }\n\n\n  onUpdateStatus = (id) => {\n      let {tasks} = this.state;\n      let index = this.findIndex(id);\n      if(index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks\n        })\n      } \n      localStorage.setItem('tasks',JSON.stringify(tasks))\n  }\n\n  onDelete = (id) => {\n    let {tasks} = this.state;\n      let index = this.findIndex(id);\n      if(index !== -1) {\n        tasks.splice(index,1)\n        this.setState({\n          tasks: tasks\n        })\n      } \n      localStorage.setItem('tasks',JSON.stringify(tasks))\n  }\n\n  onUpdate = (id,name) => {\n      let {tasks} = this.state\n      let index = this.findIndex(id);//this.state.tasks[index]\n      if(index !== -1) {\n        tasks[index].name = name;\n        this.setState({\n          tasks: tasks\n        })\n      }\n      localStorage.setItem('tasks',JSON.stringify(tasks))\n      this.setState((prevState,props) => ({\n          taskEditing : prevState.tasks[index]\n      }));\n  }\n\n\n\n\n  onShow = (keywords) => {\n    this.setState({\n      isDisplay: true,\n    })\n  }\n\n  \n\n  onSearch = (keywords) => {\n    this.setState({\n      keywords: keywords\n    })\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = +filterStatus;\n    this.setState({\n      filter: {\n        name: filterName.toLowerCase(),\n        status: filterStatus\n      }\n    })\n  }\n\n  onSort = (sort) => {\n    this.setState ({\n      sort: sort\n    })\n  }\n\n\n  findIndex = (id) => {\n    let {tasks} = this.state;\n    let result = -1;\n    tasks.forEach((task,index) => {\n        if(task.id === id) {\n          result = index;\n        }\n        \n    });\n    return result;\n  }\n\n  render() {\n\n    let {tasks, isDisplay,taskEditing, keywords,filter,sort} = this.state;\n      // if(filter){\n      //   tasks = tasks.filter((task) => {\n      //     return task.status.indexOf(filter) !== -1;\n      // })\n      // }\n      if(filter) {\n        if(filter.name){\n          tasks = tasks.filter((task) => {\n            return task.name.toLowerCase().indexOf(filter.name) !== -1\n          })\n        }\n        tasks = tasks.filter((task) => {\n          if(filter.status === -1) {\n            return task;\n          }else {\n            return task.status === (filter.status === 1 ? true : false);\n          }\n        })\n      }\n\n\n      if(keywords){\n        tasks = tasks.filter((task) => {\n          return task.name.toLowerCase().indexOf(keywords) !== -1;\n      })\n      }\n\n\n      if(sort){\n        tasks = tasks.sort((a,b) => {\n          if(a.name > b.name) return -sort;\n          else if(a.name < b.name) return sort;\n          else return -0;\n        })\n      }\n\n\n\n    let elmTaskForm = isDisplay ? <Addwork taskEditing={ taskEditing }   onData = {this.onData} tasks = { tasks } /> : \"\";\n    return (  \n      <div className=\"container\">\n          <h1 className=\"d-flex justify-content-center\">TODOLIST APP</h1>\n          <div className=\"container-fluid row mt-5\">\n            <div className=\"col-4\">\n                {elmTaskForm}\n                \n            </div>\n            <div className={isDisplay ? \"col-8\" : \"col-12\"}>\n                <Control onSort = {this.onSort} onSearch={this.onSearch} onHide={this.onHide} onShow={this.onShow}/>\n                <TaskList onFilter = {this.onFilter} tasks = { tasks } onUpdate = {this.onUpdate} onDelete = {this.onDelete} onUpdateStatus = {this.onUpdateStatus} />\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}